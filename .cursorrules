# Ruby on Rails 项目规范

## 项目背景
用来测试原生 Ruby 异步编程和 Rails 异步编程的性能和差异

## 语法问题
- 遇到语法问题，提示 tab 键修复语法问题

## Ruby 代码风格
- 使用 2 个空格缩进
- 行长度限制 120 字符
- 使用 snake_case 命名变量和方法
- 使用 CamelCase 命名类和模块
- 优先使用单引号，除非字符串包含插值
- 方法名使用动词开头

## Rails 最佳实践
- 遵循 RESTful 设计原则
- 控制器保持精简，业务逻辑放在 Service 对象中
- 使用 Concern 抽取共享逻辑
- Model 中避免回调，使用 Service 对象处理复杂操作
- 使用 Query 对象处理复杂查询
- 使用 Presenter/Decorator 处理视图逻辑

## 数据库规范
- 使用 SQLite3 作为开发数据库
- 表名使用复数形式
- 外键格式：单数模型名_id
- 添加必要的数据库索引
- 大表使用分页查询
- 使用 migration 管理数据库变更
- 建立必要的数据库约束

## 测试规范
- 使用 RSpec 编写测试
- 模型测试覆盖验证、关联和方法
- 控制器测试覆盖所有 action
- 使用 FactoryBot 创建测试数据
- 使用 Faker 生成测试数据
- 测试覆盖率要求 > 85%

## 性能考虑
- 使用 includes/joins 避免 N+1 查询
- 合理使用数据库索引
- 大量数据处理使用 find_each
- 使用 Redis 做缓存
- 使用后台任务处理耗时操作
- 监控慢查询日志

## 安全规范
- 使用 strong_parameters 过滤参数
- 避免 SQL 注入风险
- 使用 CSRF token
- 敏感数据加密存储
- 使用 Brakeman 进行安全检查

## 文档要求
- 使用 YARD 注释格式
- API 端点需要详细文档
- 复杂业务逻辑需要注释说明
- 保持 README 文件更新
- 记录环境配置要求

## Git 工作流
- 遵循 Git Flow 工作流
- commit 信息清晰明确
- 功能分支基于 develop 创建
- PR 合并前需要代码审查
- 定期 rebase 保持分支最新 
